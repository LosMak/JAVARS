import java.util.Scanner;

/**
 * –†–∞—Å—á—ë—Ç –¥–µ–ª–µ–∂–∞ –ø–∏—Ä–∞—Ç—Å–∫–æ–π –¥–æ–±—ã—á–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–≥–æ–¥—É –∫–∞–ø–∏—Ç–∞–Ω–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: "–ö–æ—Ä–∞–±–ª—å –º–æ–π!"
 */
public class HW2_3 {
    private static final Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("üè¥‚Äç‚ò†Ô∏è –î–ï–õ–ï–ñ –î–û–ë–´–ß–ò üè¥‚Äç‚ò†Ô∏è");

        int treasure = readPositiveInt("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–æ–±—ã—á–∏: ");
        int crew = readPositiveInt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ä–∞—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–∞–ø–∏—Ç–∞–Ω–∞): ");

        System.out.printf("\nüìä –û–±—â–∞—è –¥–æ–±—ã—á–∞: %d –ø–∏–∞—Å—Ç—Ä–æ–≤%n", treasure);
        System.out.printf("üë• –ö–æ–º–∞–Ω–¥–∞: %d —á–µ–ª–æ–≤–µ–∫%n%n", crew);

        // –†–∞—Å—á—ë—Ç –ø–æ –æ–±—ã—á–∞—é
        var regular = splitTreasure(treasure, crew, false);
        System.out.println("--- –ü–æ –æ–±—ã—á–∞—é ---");
        printSplit("–í–ª–∞–¥–µ–ª–µ—Ü", regular.owner, "–ö–∞–ø–∏—Ç–∞–Ω", regular.captain, "–ü–∏—Ä–∞—Ç", regular.pirate);

        // –†–∞—Å—á—ë—Ç –ø—Ä–∏ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞
        var owner = splitTreasure(treasure, crew, true);
        System.out.println("\n--- –ö–∞–ø–∏—Ç–∞–Ω: ¬´–ö–æ—Ä–∞–±–ª—å –º–æ–π!¬ª ---");
        printSplit("–í–ª–∞–¥–µ–ª–µ—Ü", owner.owner, "–ö–∞–ø–∏—Ç–∞–Ω", owner.captain, "–ü–∏—Ä–∞—Ç", owner.pirate);

        int diff = owner.captain - regular.captain;
        System.out.printf("\nüî• –ö–∞–ø–∏—Ç–∞–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —ç—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: %d –ø–∏–∞—Å—Ç—Ä–æ–≤%n", diff);
    }

    static int readPositiveInt(String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                int n = Integer.parseInt(sc.nextLine().trim());
                if (n > 0) return n;
                System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");
            } catch (NumberFormatException ignored) {
                System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!");
            }
        }
    }

    private static SplitResult splitTreasure(int t, int crew, boolean captainIsOwner) {
        int owner = captainIsOwner ? t / 2 : t / 2;
        int remaining = t - owner;
        int captain = remaining / 2;
        int crewShare = (remaining - captain) / crew;
        int captainTotal = captain + crewShare + (captainIsOwner ? owner : 0);
        return new SplitResult(owner, captain, crewShare, captainTotal);
    }

    private static void printSplit(String ownerLabel, int ownerValue,
                                   String captainLabel, int captainValue,
                                   String pirateLabel, int pirateValue) {
        System.out.printf("%s: %d%n", ownerLabel, ownerValue);
        System.out.printf("%s: %d%n", captainLabel, captainValue);
        System.out.printf("%s: %d%n", pirateLabel, pirateValue);
    }

    private record SplitResult(int owner, int captain, int pirate, int captainTotal) {}
}